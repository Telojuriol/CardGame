//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/InputSystem/TouchSystem.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @TouchSystem: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @TouchSystem()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""TouchSystem"",
    ""maps"": [
        {
            ""name"": ""Touch"",
            ""id"": ""cc496777-0014-453f-9298-0a98f5e0936b"",
            ""actions"": [
                {
                    ""name"": ""TapPosition"",
                    ""type"": ""Value"",
                    ""id"": ""cb9eb4db-fcbb-4e17-9284-e8587896652d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TapPress"",
                    ""type"": ""Button"",
                    ""id"": ""1b03c79a-7935-4d89-8ce4-4aafe7314574"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Hold"",
                    ""type"": ""Button"",
                    ""id"": ""1c7c09ef-84b3-456e-830b-12c6eb1cb6b5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold(duration=0.05)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HoldPosition"",
                    ""type"": ""Value"",
                    ""id"": ""3ef05287-9b79-4a05-b19c-32ff36664b08"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": ""Hold(duration=0.25)"",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9a6a697e-8f2e-48f0-9ef5-7901cac3cc01"",
                    ""path"": ""<Touchscreen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TapPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fd502e04-a163-46bb-a3a4-5c6045f7c07b"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TapPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""504a4a77-6a89-4418-b810-f1831eeec7fe"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hold"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""391ffd8a-ab8b-40b9-896c-84331bfece16"",
                    ""path"": ""<Touchscreen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HoldPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Touch
        m_Touch = asset.FindActionMap("Touch", throwIfNotFound: true);
        m_Touch_TapPosition = m_Touch.FindAction("TapPosition", throwIfNotFound: true);
        m_Touch_TapPress = m_Touch.FindAction("TapPress", throwIfNotFound: true);
        m_Touch_Hold = m_Touch.FindAction("Hold", throwIfNotFound: true);
        m_Touch_HoldPosition = m_Touch.FindAction("HoldPosition", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Touch
    private readonly InputActionMap m_Touch;
    private List<ITouchActions> m_TouchActionsCallbackInterfaces = new List<ITouchActions>();
    private readonly InputAction m_Touch_TapPosition;
    private readonly InputAction m_Touch_TapPress;
    private readonly InputAction m_Touch_Hold;
    private readonly InputAction m_Touch_HoldPosition;
    public struct TouchActions
    {
        private @TouchSystem m_Wrapper;
        public TouchActions(@TouchSystem wrapper) { m_Wrapper = wrapper; }
        public InputAction @TapPosition => m_Wrapper.m_Touch_TapPosition;
        public InputAction @TapPress => m_Wrapper.m_Touch_TapPress;
        public InputAction @Hold => m_Wrapper.m_Touch_Hold;
        public InputAction @HoldPosition => m_Wrapper.m_Touch_HoldPosition;
        public InputActionMap Get() { return m_Wrapper.m_Touch; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TouchActions set) { return set.Get(); }
        public void AddCallbacks(ITouchActions instance)
        {
            if (instance == null || m_Wrapper.m_TouchActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TouchActionsCallbackInterfaces.Add(instance);
            @TapPosition.started += instance.OnTapPosition;
            @TapPosition.performed += instance.OnTapPosition;
            @TapPosition.canceled += instance.OnTapPosition;
            @TapPress.started += instance.OnTapPress;
            @TapPress.performed += instance.OnTapPress;
            @TapPress.canceled += instance.OnTapPress;
            @Hold.started += instance.OnHold;
            @Hold.performed += instance.OnHold;
            @Hold.canceled += instance.OnHold;
            @HoldPosition.started += instance.OnHoldPosition;
            @HoldPosition.performed += instance.OnHoldPosition;
            @HoldPosition.canceled += instance.OnHoldPosition;
        }

        private void UnregisterCallbacks(ITouchActions instance)
        {
            @TapPosition.started -= instance.OnTapPosition;
            @TapPosition.performed -= instance.OnTapPosition;
            @TapPosition.canceled -= instance.OnTapPosition;
            @TapPress.started -= instance.OnTapPress;
            @TapPress.performed -= instance.OnTapPress;
            @TapPress.canceled -= instance.OnTapPress;
            @Hold.started -= instance.OnHold;
            @Hold.performed -= instance.OnHold;
            @Hold.canceled -= instance.OnHold;
            @HoldPosition.started -= instance.OnHoldPosition;
            @HoldPosition.performed -= instance.OnHoldPosition;
            @HoldPosition.canceled -= instance.OnHoldPosition;
        }

        public void RemoveCallbacks(ITouchActions instance)
        {
            if (m_Wrapper.m_TouchActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITouchActions instance)
        {
            foreach (var item in m_Wrapper.m_TouchActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TouchActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TouchActions @Touch => new TouchActions(this);
    public interface ITouchActions
    {
        void OnTapPosition(InputAction.CallbackContext context);
        void OnTapPress(InputAction.CallbackContext context);
        void OnHold(InputAction.CallbackContext context);
        void OnHoldPosition(InputAction.CallbackContext context);
    }
}
